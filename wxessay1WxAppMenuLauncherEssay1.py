"""Subclass of WxAppMenuLauncherEssay1, which is generated by wxFormBuilder."""

from collections import OrderedDict
import json
import os
import wx, wx.adv
import wxessay1
import sys
import pprint

SYSTRAY_ICON_FILE = 'app-menu-launcher.ico'
LAUNCHER_ITEMS_FILE = 'launcher.json'
APP_INEXISTING_ICON_FILE = 'winappinexistent.ico' if sys.platform == 'win32' else 'winappinexistent16.bmp'
APP_EXECUTABLE_GENERIC_WIN32 = 'winapp.ico' if sys.platform == 'win32' else 'winapp16.png'
SYSTRAY_MNU_SHOW, SYSTRAY_MNU_EXIT = 501, 502
# print = pprint.pprint

class LauncherItem:
    def __init__(self, path, **kwargs):
        self.path = path
        self.title = kwargs.get('title', wxessay1WxAppMenuLauncherEssay1.getTitleFromExeName(path))
        self.small_icon_idx = kwargs.get('small_icon_idx', -1)
        self.normal_icon_idx = kwargs.get('normal_icon_idx', -1)
        self.iconfile = kwargs.get('iconfile', self.path)

    def __str__(self):
        return f"{self.title} => {self.path}"


class AppLauncherDropSource(wx.DropSource):
    def __init__(self, window,exepath=None):
        print("DropSource constructor")
        wx.DropSource.__init__(self, window)
    
        self.window = window
        self.data = wx.FileDataObject()
        self.SetData(self.data)


class AppLauncherDropTarget(wx.FileDropTarget):

    def __init__(self, window):
        super().__init__()
        self.window = window

    def GetDataObject(self):
        print("GetDataObject")
        super().GetDataObject()

    def SetDataObject(self, data):
        print("SetDataObject")
        return super().SetDataObject(data)

    def OnDrop(self, x, y):
        print("OnDrop")
        return super().OnDrop(x, y)
    
    def OnLeave(self):
        '''Called when the mouse leaves the window while dragging is active'''
        '''FIXME: the file is being moved out of the window, didn't find out to cancel the drop '''
        print("OnLeave")
        executables = [item.path for item in self.window.launcher_items_by_pos]
        last_file_dropped = self.window.lastFileDropped
        idx = executables.index(last_file_dropped)
        try: 
            #self.window.listView.SetItemBackgroundColour(self.window.listView.FindItem(-1, wxessay1WxAppMenuLauncherEssay1.getTitleFromExeName(self.lastFileInDrop)), wx.Colour(255, 0, 0))
            print("OnLeave: file is in launcher")
            print(f"Removing {last_file_dropped}...")
            self.window.launcher_items_by_pos.pop(idx)
            self.window.redraw_icons()
            self.SetDataObject(None)
            return None
        except Exception as ex:
            print(ex)
            #print("OnLeave: file is not in launcher")
        
        superRet = super().OnLeave()
        print("OnLeave: super returned", superRet)
        return superRet

    def OnDropFiles(self, x, y, filenames):
        print("OnDropFiles: %s" % ",".join(filenames))
        self.lastFileInDrop = filenames[0]
        # self.window.SetInsertionPointEnd()
        # elemAtPoint = wx.FindWindowAtPointer()
        # print("element at point: %s" % elemAtPoint)
        # executables = list( item.path for item in self.window.launcher_items_by_pos.values())
        executables = list(item.path for item in self.window.launcher_items_by_pos)
        # print("Before:", list(str(launcher_item) for launcher_item in self.window.launcher_items_by_pos))
        print("Before:", self.window.dump_listview_data())
        for file in filenames:
            title = wxessay1WxAppMenuLauncherEssay1.getTitleFromExeName(
                file)
            index_from = self.window.listView.FindItem(-1, title)
            # index_from = list_item.GetId()
            #index_to, flags = self.window.listView.HitTest((x, y))
            index_to = self.window.guess_index_on_click(x,y)
            if (index_from == -1): 
                title_from = wxessay1WxAppMenuLauncherEssay1.getTitleFromExeName(file)
            else:
                title_from = self.window.listView.GetItemText(index_from)
            #if file in executables:
            if index_from != -1: # existing item
                #if index_to == self.window.listView.GetItemCount(): index_to -= 1
                title_to = self.window.listView.GetItemText(index_to)
                print(f"Drag'n'drop {index_from} => {index_to}: {title_from} =>  {title_to}")
                listItemBeingDragged = self.window.listView.GetItem(index_from)
                launcher_item = self.window.launcher_items_by_pos.pop(index_from)
                #self.window.listView.DeleteItem(index_from)
                #self.window.listView.InsertItem(index_to, title_from, launcher_item.small_icon_idx)
                # self.window.listView.SetItem(index_to,0,title_from, launcher_item.small_icon_idx)
                # for i in range(index_from, index_to):
                #    self.window.launcher_items_by_pos[i] = self.window.launcher_items_by_pos[i+1]
                #self.window.launcher_items_by_pos.pop(index_from)
                print([x.title for x in self.window.launcher_items_by_pos])
            else:  # new item
                #index_to = self.window.listView.GetItemCount()
                launcher_item = self.window.listview_add_entry(title, file, index_to)
                #self.window.launcher_items_by_pos.append(launcher_item)
            wx.CallAfter(self.window.launcher_items_by_pos.insert,index_to, launcher_item)
        wx.CallAfter(self.window.redraw_icons)
            # self.window.refresh_launcher_items_holder()
        # print("After:",{(x, str(y))
        #        for (x, y) in self.window.launcher_items_by_pos.items()})
        # print("After:", list(str(launcher_item) for launcher_item in self.window.launcher_items_by_pos))
        print("After:", self.window.dump_listview_data())
        return True

    def OnData(self, x, y, defResult):
        print("onData:", (x , y), defResult, self.GetData())
        super().OnData(x, y, defResult)
        if defResult == wx.DF_FILENAME:
            print("DF_FILENAME")
        return wx.DragMove
    
    def OnDragOver(self, x, y, defResult):
        return super().OnDragOver(x, y, defResult)


# Implementing WxAppMenuLauncherEssay1
class wxessay1WxAppMenuLauncherEssay1(wxessay1.WxAppMenuLauncherEssay1):
    '''This class implements the main window of the application
        FIXME when adding one item out of the list, it's giving an error: can't know 
        about index -1
    '''

    def refresh_launcher_items_holder(self):
        launcher_titles = list(map(lambda item: item.title, self.launcher_items.values()))
        launcher_executables = list(self.launcher_items.keys())
        new_dict = OrderedDict()
        for i in range(self.listView.GetItemCount()):
            item = self.listView.GetItem(i)
            try:
                title_idx = launcher_titles.index(item.GetText())
                executable = launcher_executables[title_idx]
                new_dict[executable] = self.launcher_items[executable]
            except Exception as ex:
                print(ex)
                # new_dict[executable] = LauncherItem(executable, small_icon_idx=new_idx_small,
                #                                       normal_icon_idx=new_idx_normal)
        self.launcher_items = new_dict
        self.lastFileDropped = None

    def guess_index_on_click(self, x, y):
        index, flags = self.listView.HitTest((x, y))
        if index == wx.NOT_FOUND:  # Not clicked on an item.
            if flags & (
                    wx.LIST_HITTEST_NOWHERE | wx.LIST_HITTEST_ABOVE | wx.LIST_HITTEST_BELOW):  # Empty list or below last item.
                index = self.listView.GetItemCount()  # Append to end of list.
            elif self.listView.GetItemCount() > 0:
                if y <= self.listView.GetItemRect(0).y:  # Clicked just above first item.
                    index = 0  # Append to top of list.
                else:
                    index = self.listView.GetItemCount() + 1  # Append to end of list.
        else:  # Clicked on an item.
            # Get bounding rectangle for the item the user is dropping over.
            rect = self.listView.GetItemRect(index)

            # If the user is dropping into the lower half of the rect,
            # we want to insert _after_ this item.
            # Correct for the fact that there may be a heading involved.
            #if y > rect.y - self.listView.GetItemRect(0).y + rect.height / 2:
            #    index += 1
        return index


    def dump_listview_data(self):
        itemsList = []
        for i in range(self.listView.GetItemCount()):
            itemsList.append(self.listView.GetItemText(i))
        return itemsList


    def listview_add_entry(self, label, executable, pos=-1):
        if pos != -1:
            idx = pos
        else:
            idx = self.i
            self.i += 1
        try:
            icon = wx.Icon(wx.IconLocation(executable))
        except SystemError:
            icon = wx.Icon(wx.IconLocation(APP_INEXISTING_ICON_FILE))
            print("Error fetching icon!")

        if sys.platform == 'win32':
            new_idx_small = self.smallImageList.Add(icon)
            new_idx_normal = self.normalImageList.Add(icon)
        else:
            new_idx_small, new_idx_normal = -1,-1

        if sys.platform  == 'win32':    
            new_launcher_item = LauncherItem(executable, small_icon_idx=new_idx_small,
                                         normal_icon_idx=new_idx_normal, 
                                         iconfile=executable if new_idx_small != -1 else APP_INEXISTING_ICON_FILE)
        else:
            new_launcher_item = LauncherItem(executable, small_icon_idx=new_idx_small,
                                             normal_icon_idx=new_idx_normal,
                                             iconfile=APP_EXECUTABLE_GENERIC_WIN32)
        if label not in self.launcher_items_by_title.keys():
            #self.launcher_items_by_pos.append(new_launcher_item)
            self.launcher_items_by_title[label] = new_launcher_item
        if self.listView.WindowStyle == wx.LC_SMALL_ICON:
            image_list_id = new_idx_small
        elif self.listView.WindowStyle == wx.LC_ICON:
            image_list_id = new_idx_normal
        if sys.platform == 'win32':
            newItemIdx = self.listView.InsertItem(
            idx, label, image_list_id)
        else:
            newItemIdx = self.listView.InsertItem(idx,label)
        print(f"added item to list at {newItemIdx}({idx}):{label}")
        # self.listView.GetItem(newItemIdx).SetData(self.launcher_items[executable])
        # self.listView.SetItemData(newItemIdx, new_launcher_item)
        #return self.listView.GetItem(newItemIdx)
        return new_launcher_item


    def redraw_icons(self, empty_first=True):
        if empty_first: self.listView.ClearAll()
        self.i = 0
        if sys.platform != 'win32':
            for item in self.launcher_items_by_pos:
                newItemIdx = self.listView.InsertItem(
                    self.i, item.title)
                self.i += 1
            return

        if self.listView.WindowStyle == wx.LC_SMALL_ICON:
            for item in self.launcher_items_by_pos:
                newItemIdx = self.listView.InsertItem(
                    self.i, item.title, item.small_icon_idx)
                self.i += 1
        elif self.listView.WindowStyle == wx.LC_ICON:
            for item in self.launcher_items_by_pos:
                newItemIdx = self.listView.InsertItem(
                    self.i, item.title, item.normal_icon_idx)
                self.i += 1


    def __init__(self, parent):
        self.i = 0
        self.launcher_items_by_pos = list()
        self.launcher_items_by_title = dict()
        wxessay1.WxAppMenuLauncherEssay1.__init__(self, parent)
        if (self.listView.WindowStyle == wx.LC_SMALL_ICON):
            print("In small icon mode")
        elif self.listView.WindowStyle == wx.LC_ICON:
            print("In normal icon mode")
        self.smallImageList = wx.ImageList(16, 16)
        self.normalImageList = wx.ImageList(32, 32)
        self.listView.SetImageList(self.smallImageList, wx.IMAGE_LIST_SMALL)
        self.listView.SetImageList(self.normalImageList, wx.IMAGE_LIST_NORMAL)
        if not os.path.exists(LAUNCHER_ITEMS_FILE):
            print(f"{LAUNCHER_ITEMS_FILE} doesn't exist. Creating it...")
            json.dump({}, open(LAUNCHER_ITEMS_FILE, "w"), indent=4)
        self.loadJson()
        self.SetIcon(wx.Icon("app-menu-launcher.ico"))
        self.StatusBar.SetStatusText(
            f"{len(self.launcher_items_by_pos)}  items loaded")
        self.listView.SetDropTarget(AppLauncherDropTarget(self))

        self.systray_menu = self.init_systray_menu()

        
        self.systray = wx.adv.TaskBarIcon()
        #self.systray.CreatePopupMenu = self.systray_menu
        systray_ico = wx.Icon(wx.Bitmap(SYSTRAY_ICON_FILE))
        self.systray.SetIcon(systray_ico, "WX App Menu Launcher")
        self.systray.Bind(wx.adv.EVT_TASKBAR_RIGHT_DOWN, self.onSystrayRClick )
        self.systray.Bind(wx.adv.EVT_TASKBAR_LEFT_DOWN, self.onSystrayShow)
        self.systray_menu.Bind(wx.EVT_MENU,self.onSystrayShow ,id=SYSTRAY_MNU_SHOW)
        self.systray_menu.Bind(wx.EVT_MENU,self.onSystrayExit,id=SYSTRAY_MNU_EXIT)
        self.Show()

    def onSystrayRClick(self, event):
         print("OnSystrayClick")
         self.PopupMenu(self.systray_menu)

    def onSystrayShow(self, event):
        print("OnSystrayShow")
        if not self.IsShown():
            self.Show()
        else: self.Hide()

    def onSystrayExit(self,event):
        print("OnSystrayExit")
        self.Close()

    def init_systray_menu(self):
        menu = wx.Menu()
        for i,item in zip(range(len(self.launcher_items_by_pos)),self.launcher_items_by_pos):
            menu_item = wx.MenuItem(menu,2000+i,item.title)
            menu_item.SetBitmap(wx.Icon(wx.IconLocation(item.iconfile)))
            icon = menu_item.GetBitmap()
            resizedIcon = wx.Bitmap.Rescale(icon,wx.Size(16,16))
            menu_item.SetBitmap(icon)
            #menu.Append(2000+i,item.title)
            menu.Append(menu_item)
            menu.Bind(wx.EVT_MENU,self.onSystrayAppItemClick, id=2000+i)
        menu.AppendSeparator()
        menu.Append(SYSTRAY_MNU_SHOW,"Show")
        menu.Append(SYSTRAY_MNU_EXIT,"Exit")
        return menu

    def onSystrayAppItemClick(self,event):
        print("OnSystrayAppItemClick")
        item = self.launcher_items_by_pos[event.GetId()-2000]
        print(f"item: {item}")
        self.exec(item.path)

    def getTitleFromExeName(exefilepath):
        return os.path.splitext(os.path.basename(exefilepath))[0].capitalize()


    def storeJson(self):
        json_items = {}
        for item in self.launcher_items_by_pos:
            json_items[item.title] = {"exe_path": item.path,
                                 "title": item.title, "env_ini": "", "tmpicon": ""}
        json.dump(json_items, open("launcher.json", "w"), indent=4)


    def loadJson(self):
        with open("launcher.json", "r") as json_file:
            json_items = json.load(json_file)
            for item in json_items.values():
                executable = item['exe_path']
                if not os.path.exists(executable):
                    print(f"{executable} does not exist. Skipping...")
                    icon = wx.Icon(wx.IconLocation(APP_INEXISTING_ICON_FILE))
                    new_idx_small = self.smallImageList.Add(icon)
                    new_idx_normal = self.normalImageList.Add(icon)
                    new_launcher_item = LauncherItem(executable, 
                        small_icon_idx=new_idx_small, normal_icon_idx = new_idx_normal,
                          iconfile=APP_INEXISTING_ICON_FILE)
                else:
                    if sys.platform == 'win32':    
                        try:
                            icon = wx.Icon(wx.IconLocation(executable))
                        except SystemError:
                            icon = wx.Icon(wx.IconLocation(APP_EXECUTABLE_GENERIC_WIN32))
                            print("Error fetching icon! Using a generic one instead.")
                    else:
                        icon = wx.Icon(wx.IconLocation(
                            APP_EXECUTABLE_GENERIC_WIN32))
                    new_idx_small = self.smallImageList.Add(icon)
                    new_idx_normal = self.normalImageList.Add(icon)
                    if sys.platform == 'win32':
                        new_launcher_item = LauncherItem(executable, small_icon_idx=new_idx_small,
                                                         normal_icon_idx=new_idx_normal)
                    else:
                        new_launcher_item = LauncherItem(executable, small_icon_idx=new_idx_small,
                                                         normal_icon_idx=new_idx_normal,iconfile=APP_EXECUTABLE_GENERIC_WIN32)
                
                self.launcher_items_by_pos.append(new_launcher_item)
                self.launcher_items_by_title[item['title']] = new_launcher_item
            self.redraw_icons(False)


    #def onActivate(self, event):
        # print("onActivate!")
        # print(event)
     #   super().onActivate(event)


    def onClose(self, event):
        print("onClose!")
        self.storeJson()
        super().onClose(event)
        sys.exit(0)


    def onViewMenuClick(self, event):
        if event.GetId() == wxessay1.MNU_VIEW_ICON:
            self.listView.SetSingleStyle(wx.LC_ICON)
        elif event.GetId() == wxessay1.MNU_VIEW_LIST:
            self.listView.SetSingleStyle(wx.LC_SMALL_ICON)

        print("View menu clicked!")
        self.redraw_icons()


    def OnListViewOnDblClick(self, event):
        print("OnListViewOnDblClick!")
        itemIdClicked = event.GetIndex()
        executable = list(item.path for item in self.launcher_items_by_pos)[itemIdClicked]
        self.exec(executable)

    def exec(self,cmdline):
        print(f"Launching '{cmdline}'...")
        if sys.platform == 'darwin':
            cmdline = os.system(f'open -a \"{cmdline}\"')
        else:
            os.system(f"\"{cmdline}\"")


    def aboutMenuItemOnMenuSelection( self, event ):
        #self.aboutDialog = wx.MessageDialog(self, "WxAppMenuLauncher\n\nA simple application launcher\n\nby @josep_pons", "About", wx.OK)
        self.aboutDialog = AboutWindow(self)
        if not self.aboutDialog.IsShown():
            self.aboutDialog.Show()
        print('about clicked!')


    def onListViewDrag(self, event):
        print("onListViewDrag!")
        print(event.GetItem().GetText())

        title_being_dropped = self.listView.GetItemText(event.GetIndex())
        exepath = self.launcher_items_by_title[title_being_dropped].path
        fdo = wx.FileDataObject()
        self.lastFileDropped = exepath
        fdo.AddFile(exepath)
        drop_source = AppLauncherDropSource(self,exepath=exepath)
        drop_source.SetData(fdo)
        drop_source.DoDragDrop(True)
    # return super().onListViewDrag(event)

    def onViewOnTopMenuItem( self, event ):
        self.ToggleWindowStyle(wx.STAY_ON_TOP)
        if (self.ViewOnTopMenuItem.IsCheckable()) :
            self.ViewOnTopMenuItem.Check(self.IsTopLevel())
        
        print("View on top menu clicked!")


class AboutWindow(wxessay1.AboutWindow):

    def __init__(self, parent):
        super().__init__(parent)
        self.m_bitmap1.SetBitmap(wx.Bitmap("app-menu-launcher.ico"))
        self.m_htmlWin2.SetPage("mailto:digfish@digfish.org")
        self.m_button1.Bind( wx.EVT_BUTTON, self.onClose )
    
    def onClose(self,event):
        self.Close()


if __name__ == '__main__':
    app = wx.App(None)
    frame = wxessay1WxAppMenuLauncherEssay1(None)
    app.MainLoop()
